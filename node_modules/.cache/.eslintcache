[{"C:\\Users\\David\\Dropbox\\Dev\\RegisterandLogin\\reactClient\\src\\index.js":"1","C:\\Users\\David\\Dropbox\\Dev\\RegisterandLogin\\reactClient\\src\\App.js":"2","C:\\Users\\David\\Dropbox\\Dev\\RegisterandLogin\\reactClient\\src\\components\\Navbar.js":"3","C:\\Users\\David\\Dropbox\\Dev\\RegisterandLogin\\reactClient\\src\\components\\Dashboard.js":"4","C:\\Users\\David\\Dropbox\\Dev\\RegisterandLogin\\reactClient\\src\\components\\Login.js":"5","C:\\Users\\David\\Dropbox\\Dev\\RegisterandLogin\\reactClient\\src\\components\\Register.js":"6","C:\\Users\\David\\Dropbox\\Dev\\RegisterandLogin\\reactClient\\src\\components\\Post.js":"7"},{"size":308,"mtime":1652408361878,"results":"8","hashOfConfig":"9"},{"size":20045,"mtime":1654211524747,"results":"10","hashOfConfig":"9"},{"size":3524,"mtime":1652987930017,"results":"11","hashOfConfig":"9"},{"size":3282,"mtime":1652987204934,"results":"12","hashOfConfig":"9"},{"size":2448,"mtime":1652899088407,"results":"13","hashOfConfig":"9"},{"size":3756,"mtime":1652899086850,"results":"14","hashOfConfig":"9"},{"size":2163,"mtime":1653599711688,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"49titc",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"C:\\Users\\David\\Dropbox\\Dev\\RegisterandLogin\\reactClient\\src\\index.js",[],["33","34"],"C:\\Users\\David\\Dropbox\\Dev\\RegisterandLogin\\reactClient\\src\\App.js",["35","36","37","38","39","40"],"import Axios from \"axios\";\r\nimport \"./App.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { BrowserRouter, Route, Switch, useHistory } from \"react-router-dom\";\r\nimport Dashboard from \"./components/Dashboard\";\r\nimport Login from \"./components/Login\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport Register from \"./components/Register\";\r\nimport Post from \"./components/Post\";\r\nimport Masonry from \"react-masonry-css\";\r\nimport UnopDropdown from \"unop-react-dropdown\";\r\n\r\nfunction App() {\r\n  const history = useHistory();\r\n\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [title, setTitle] = useState(\"\");\r\n\r\n  const [isActive, setActive] = useState(true);\r\n  const [isActivePost, setIsActivePost] = useState(true);\r\n\r\n  const [postText, setPostText] = useState(\"\");\r\n  const [boardList, setboardList] = useState([]);\r\n  const [postList, setPostList] = useState([]);\r\n\r\n  const [boardId, setBoardId] = useState(-1);\r\n\r\n  const [sorted, setSorted] = useState(false);\r\n  const [boardIdParam, setBoardIdParam] = useState(\"\");\r\n\r\n  const [viewportWidth, setViewportWidth] = useState(getWindowDimensions());\r\n  const [postDropdownActive, setPostDropdownActive] = useState(false);\r\n\r\n  const [postEditState, setPostEditState] = useState(false);\r\n  const [editPostId, setEditPostId] = useState(-1);\r\n\r\n  const [textAreaEditable, setTextAreaEditable] = useState(false);\r\n  const [postAreaText, setPostAreaText] = useState(\"\");\r\n\r\n  function getWindowDimensions() {\r\n    const { innerWidth: width } = window;\r\n    return {\r\n      width,\r\n    };\r\n  }\r\n\r\n  function toggleClass() {\r\n    setActive(!isActive);\r\n  }\r\n\r\n  function togglePost() {\r\n    setIsActivePost(!isActivePost);\r\n  }\r\n\r\n  const addBoard = () => {\r\n    if (firstName === \"\") {\r\n      alert(\"Name required\");\r\n      return 0;\r\n    } else if (title === \"\") {\r\n      alert(\"Title required\");\r\n      return 0;\r\n    }\r\n\r\n    Axios.post(\"http://localhost:5000/create\", {\r\n      firstName: firstName,\r\n      lastName: lastName,\r\n      title: title,\r\n    }).then(() => {\r\n      getBoards();\r\n    });\r\n  };\r\n\r\n  const addPost = () => {\r\n    if (postText === \"\") {\r\n      alert(\"Post text required\");\r\n      return 0;\r\n    }\r\n    if (boardId === null) {\r\n      alert(\"board id not found\");\r\n      return 0;\r\n    }\r\n\r\n    Axios.post(\"http://localhost:5000/createPost\", {\r\n      postText: postText,\r\n      boardId: boardId,\r\n    }).then(() => {\r\n      getBoards();\r\n    });\r\n  };\r\n\r\n  const toggleSort = (sorted) => {\r\n    Axios.get(\"http://localhost:5000/boardsSorted?order=\" + sorted).then(\r\n      (response) => {\r\n        setboardList(response.data);\r\n        setSorted(!sorted);\r\n        console.log(response);\r\n      }\r\n    );\r\n  };\r\n\r\n  const getBoards = () => {\r\n    Axios.get(\"http://localhost:5000/boards\").then((response) => {\r\n      // console.log(response);\r\n      setboardList(response.data);\r\n    });\r\n  };\r\n\r\n  const getPosts = (id) => {\r\n    Axios.get(`http://localhost:5000/boards/${id}`).then((response) => {\r\n      // console.log(response.data);\r\n      setPostList(response.data);\r\n      // setPostList(\r\n      //   response.data.map((val) => {\r\n      //     console.log(val);\r\n      //     return val.id === id\r\n      //       ? {\r\n      //         id: val.id,\r\n      //         text: val.text,\r\n      //         createdBy: val.createdBy,\r\n      //         boardId: val.boardId,\r\n      //         createdOn: val.createdOn,\r\n      //         }\r\n      //       : val;\r\n      //   })\r\n      // );\r\n    });\r\n  };\r\n  const enablePost = (id) => {\r\n    setPostEditState(!postEditState);\r\n    setEditPostId(id);\r\n    setTextAreaEditable(!textAreaEditable);\r\n  };\r\n\r\n  const editPost = (id, newText) => {\r\n    enablePost(id);\r\n    // alert(id + \" \" + newText);\r\n\r\n    Axios.put(`http://localhost:5000/edit`, { text: newText, id: id }).then(\r\n      () => {\r\n        setPostList(\r\n          postList.map((val) => {\r\n            return val.id === id\r\n              ? {\r\n                  id: val.id,\r\n                  text: newText,\r\n                }\r\n              : val;\r\n          })\r\n        );\r\n      }\r\n    );\r\n  };\r\n\r\n  // const updateBoardWage = (id) => {\r\n  //   Axios.put(\"http://localhost:5000/update\", { wage: newWage, id: id }).then(\r\n  //     () => {\r\n  //       setboardList(\r\n  //         boardList.map((val) => {\r\n  //           return val.id === id\r\n  //             ? {\r\n  //                 id: val.id,\r\n  //                 name: val.name,\r\n  //                 country: val.country,\r\n  //                 age: val.age,\r\n  //                 position: val.position,\r\n  //                 wage: newWage,\r\n  //               }\r\n  //             : val;\r\n  //         })\r\n  //       );\r\n  //     }\r\n  //   );\r\n  // };\r\n\r\n  const deleteBoard = (id) => {\r\n    Axios.delete(`http://localhost:5000/delete/${id}`).then((response) => {\r\n      setboardList(\r\n        boardList.filter((val) => {\r\n          return val.id !== id;\r\n        })\r\n      );\r\n    });\r\n  };\r\n\r\n  const deletePost = (id) => {\r\n    Axios.delete(`http://localhost:5000/deletePost/${id}`).then((response) => {\r\n      setPostList(\r\n        postList.filter((val) => {\r\n          return val.id !== id;\r\n        })\r\n      );\r\n    });\r\n  };\r\n\r\n  const formateDate = (date) => {\r\n    return date.split(\"T\")[0];\r\n  };\r\n\r\n  const handleTextAreaChange = (event) => {\r\n    setPostAreaText(event.target.value);\r\n    console.log(event.target.value);\r\n  };\r\n\r\n  const updatePostText = (itemText) => {\r\n    if (postAreaText === \"\") {\r\n      return itemText;\r\n    } else {\r\n      return postAreaText;\r\n    }\r\n  };\r\n\r\n  const getBoardIdParam = () => {\r\n    const myArray = window.location.href.split(\"/\");\r\n    setBoardIdParam(myArray[4]);\r\n\r\n    return (\r\n      <div className=\"hero-body\">\r\n        <div className=\"wrap\">\r\n          <Masonry\r\n            breakpointCols={viewportWidth.width < 1000 ? 1 : 3}\r\n            className=\"my-masonry-grid\"\r\n            columnClassName=\"my-masonry-grid_column\"\r\n          >\r\n            {postList.map(function (item, i) {\r\n              return (\r\n                <div className=\"container\">\r\n                  <div className=\"columns is-centered\">\r\n                    <div className=\"column no-flex\">\r\n                      <form onSubmit={null} className=\"box\">\r\n                        <article className=\"message is-white\">\r\n                          <div\r\n                            className=\"message-header\"\r\n                            style={{ padding: \"0\" }}\r\n                          >\r\n                            <textarea\r\n                              // type=\"text\"\r\n                              readOnly={\r\n                                postEditState === true && item.id === editPostId\r\n                                  ? false\r\n                                  : true\r\n                              }\r\n                              defaultValue={updatePostText(item.text)}\r\n                              // readOnly={textAreaEditable ? true : false}\r\n                              className={\r\n                                postEditState === true && item.id === editPostId\r\n                                  ? \"post-text-editable-bad\"\r\n                                  : \"post-text-editable\"\r\n                              } \r\n                              // onClick={() =>\r\n                              //   !textAreaEditable ? editPost(item.id) : null\r\n                              // }\r\n                              // onFocus={() => editPost(item.id)}\r\n                              // onFocus={handleTextAreaChange}\r\n                              // onBlur={handleTextAreaChange}\r\n                              onChange={(event) => {\r\n                                event.preventDefault();\r\n                                // handleTextAreaChange();\r\n                                console.log(event.target.value);\r\n                              }}\r\n                              onBlur={handleTextAreaChange}\r\n                            ></textarea>\r\n                          </div>\r\n\r\n                          <div\r\n                            id={item.id}\r\n                            className={\r\n                              postEditState === true && item.id === editPostId\r\n                                ? \"post-edit\"\r\n                                : \"post-edit hidden\"\r\n                            }\r\n                          >\r\n                            <button\r\n                              onClick={(event) => {\r\n                                event.preventDefault();\r\n                                editPost(item.id, postAreaText);\r\n                              }}\r\n                            >\r\n                              ✓\r\n                            </button>\r\n                            <button onClick={() => enablePost(item.id)}>\r\n                              X\r\n                            </button>\r\n                          </div>\r\n\r\n                          <div className=\"post-lower\">\r\n                            <UnopDropdown\r\n                              trigger={\r\n                                <button\r\n                                  onClick={() => {\r\n                                    setPostDropdownActive(!postDropdownActive);\r\n                                  }}\r\n                                  style={{\r\n                                    boxShadow: \"none\",\r\n                                    backgroundColor: \"transparent\",\r\n                                    backgroundImage: \"none\",\r\n                                    borderColor: \"transparent\",\r\n                                    cursor: \"pointer\",\r\n                                    color: \"#636363\",\r\n                                  }}\r\n                                >\r\n                                  <h1 style={{ fontSize: \"28px\" }}>...</h1>\r\n                                </button>\r\n                              }\r\n                            >\r\n                              <div className=\"dropdown\">\r\n                                <li>\r\n                                  <a\r\n                                    className=\"dropdown-item\"\r\n                                    onClick={() => enablePost(item.id)}\r\n                                  >\r\n                                    <i>Edit Message</i>\r\n                                  </a>\r\n                                </li>\r\n                                <li>\r\n                                  <a\r\n                                    className=\"dropdown-item\"\r\n                                    onClick={() => deletePost(item.id)}\r\n                                  >\r\n                                    <i>Delete</i>\r\n                                  </a>\r\n                                </li>\r\n                              </div>\r\n                            </UnopDropdown>\r\n\r\n                            <h1 style={{ marginLeft: \"auto\" }}>\r\n                              From {item.createdBy}\r\n                            </h1>\r\n                          </div>\r\n                        </article>\r\n                      </form>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </Masonry>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setViewportWidth(getWindowDimensions());\r\n    };\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    if (boardIdParam !== \"\") {\r\n      getPosts(boardIdParam);\r\n    } else {\r\n      getBoards();\r\n    }\r\n  }, [boardId, boardIdParam]);\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Login />\r\n          </Route>\r\n          <Route path=\"/login\">\r\n            <Login />\r\n          </Route>\r\n          <Route path=\"/register\">\r\n            <Register />\r\n          </Route>\r\n          <Route path=\"/dashboard\">\r\n            <Navbar signedIn={true} />\r\n            <Dashboard isActive={isActive} setActive={setActive} />\r\n          </Route>\r\n          <Route path=\"/boards/\" component={getBoardIdParam}></Route>\r\n        </Switch>\r\n      </BrowserRouter>\r\n\r\n      <Post\r\n        // boardId={val.id}\r\n        isActivePost={isActivePost}\r\n        togglePost={togglePost}\r\n        setPostText={setPostText}\r\n        addPost={addPost}\r\n        boardId={boardId}\r\n      />\r\n\r\n      <div className={isActive ? \"hero-body hide\" : \"hero-body\"}>\r\n        <div className=\"container\">\r\n          <div className=\"columns is-centered\">\r\n            <div className=\"column is-5-desktop\">\r\n              <form onSubmit={null} className=\"box\">\r\n                <article className=\"message is-white\">\r\n                  <div className=\"message-header\" style={{ padding: \"0\" }}>\r\n                    <h2>Create new board</h2>\r\n                    <button\r\n                      className=\"delete\"\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n\r\n                        toggleClass();\r\n                      }}\r\n                    ></button>\r\n                  </div>\r\n                </article>\r\n                <p className=\"has-text-centered\">{null}</p>\r\n                <div className=\"field is-hotizontal mt-5\">\r\n                  <label className=\"label\">Who is this board for?</label>\r\n                  <div className=\"field is-horizontal\">\r\n                    <div className=\"field-body\">\r\n                      <div className=\"field\">\r\n                        <p className=\"control is-expanded left\">\r\n                          <input\r\n                            className=\"input\"\r\n                            type=\"text\"\r\n                            placeholder=\"First name\"\r\n                            onChange={(event) => {\r\n                              setFirstName(event.target.value);\r\n                            }}\r\n                            required\r\n                          />\r\n                        </p>\r\n                      </div>\r\n                      <div className=\"field\">\r\n                        <p className=\"control is-expanded right\">\r\n                          <input\r\n                            className=\"input\"\r\n                            type=\"text\"\r\n                            placeholder=\"Last name\"\r\n                            onChange={(event) => {\r\n                              setLastName(event.target.value);\r\n                            }}\r\n                            required\r\n                          />\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* title section */}\r\n                  <label className=\"label\">\r\n                    What title would you like on top of the board?\r\n                  </label>\r\n                  <div className=\"field-body\">\r\n                    <div className=\"field\">\r\n                      <p className=\"control is-expanded left\">\r\n                        <input\r\n                          className=\"input\"\r\n                          type=\"text\"\r\n                          placeholder=\"Happy Bday, Get Well Soon, You're Amazing, etc.\"\r\n                          onChange={(event) => {\r\n                            setTitle(event.target.value);\r\n                          }}\r\n                          required\r\n                        />\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* next button */}\r\n                  <div className=\"field mt-4\">\r\n                    <div className=\"field-body\">\r\n                      <div className=\"field\">\r\n                        <div className=\"control is-expanded\">\r\n                          <button\r\n                            className=\"button is-fullwidth is-primary\"\r\n                            onClick={(e) => {\r\n                              e.preventDefault();\r\n                              addBoard();\r\n                              toggleClass();\r\n                            }}\r\n                          >\r\n                            Create board\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* check if we are logged in  */}\r\n      {(window.location.href === \"http://localhost:3000/dashboard\") === true ? (\r\n        <div className=\"App\">\r\n          <hr />\r\n          <div className=\"boards\">\r\n            {boardList.map((val, key) => {\r\n              return (\r\n                <div\r\n                  className=\"board box column is-9-desktop\"\r\n                  style={{ width: \"100%\" }}\r\n                >\r\n                  <div className=\"board-inside\">\r\n                    <img\r\n                      className=\"board-img\"\r\n                      src=\"https://source.unsplash.com/random/175%C3%97175/?calm\"\r\n                      alt=\"\"\r\n                    />\r\n\r\n                    <div className=\"board-column\">\r\n                      <div className=\"board-upper\">\r\n                        <h1 className=\"board-title\">{val.title}</h1>\r\n                        <a href={`http://localhost:3000/boards/${val.id}`}>\r\n                          <button\r\n                            className=\"button is-info is-outlined\"\r\n                            // onClick={() => {\r\n                            //   getPosts(val.id);\r\n                            //   // history.push(`/boards/${val.id}`);\r\n                            // }}\r\n                          >\r\n                            View\r\n                          </button>\r\n                        </a>\r\n                        <hr />\r\n                        <div className=\"board-names\">\r\n                          <h3 className=\"board-name-for\">For</h3>\r\n                          <h3 className=\"board-name\">\r\n                            {val.firstName} {val.lastName}\r\n                          </h3>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"board-lower\">\r\n                        <div className=\"column sm-5 no-padding\">\r\n                          <h3 className=\"board-name-grey\">\r\n                            {val.createdByName ? `Creator` : null}\r\n                          </h3>\r\n                          <h3 className=\"h3-text\">\r\n                            {val.createdByName ? val.createdByName : null}\r\n                          </h3>\r\n                        </div>\r\n\r\n                        <div className=\"column sm-5 no-padding\">\r\n                          <h3 className=\"board-name-grey\">Created</h3>\r\n                          <h3 className=\"h3-text\">\r\n                            {formateDate(val.createdOn)}\r\n                          </h3>\r\n                        </div>\r\n\r\n                        <div className=\"column sm-5 no-padding\">\r\n                          <h3 className=\"board-name-grey\">Posts</h3>\r\n                          <h3 className=\"h3-text\">\r\n                            {val.postCount <= 0 ? \"0\" : val.postCount}\r\n                          </h3>\r\n                          <h3 className=\"board-name-grey\">Board id</h3>\r\n                          <h3 className=\"h3-text\">{val.id}</h3>\r\n                        </div>\r\n                        <button\r\n                          className=\"button is-info is-rounded\"\r\n                          onClick={() => {\r\n                            if (isActivePost) setIsActivePost(false);\r\n                            setBoardId(val.id);\r\n                          }}\r\n                        >\r\n                          Add to board\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\David\\Dropbox\\Dev\\RegisterandLogin\\reactClient\\src\\components\\Navbar.js",[],"C:\\Users\\David\\Dropbox\\Dev\\RegisterandLogin\\reactClient\\src\\components\\Dashboard.js",["41"],"/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Dashboard = props => {\r\n  const [name, setName] = useState(\"\");\r\n  const [token, setToken] = useState(\"\");\r\n  const [expire, setExpire] = useState(\"\");\r\n  const [users, setUsers] = useState([]);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    refreshToken();\r\n    getUsers();\r\n  }, []);\r\n\r\n  const refreshToken = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:5000/token\");\r\n      setToken(response.data.accessToken);\r\n      const decoded = jwt_decode(response.data.accessToken);\r\n      // @ts-ignore\r\n      setName(decoded.name);\r\n      // @ts-ignore\r\n      setExpire(decoded.exp);\r\n    } catch (error) {\r\n      if (error.response) {\r\n        history.push(\"/\");\r\n        history.go(0);\r\n      }\r\n    }\r\n  };\r\n\r\n  const axiosJWT = axios.create();\r\n\r\n  axiosJWT.interceptors.request.use(\r\n    async (config) => {\r\n      const currentDate = new Date();\r\n      // @ts-ignore\r\n      if (expire * 1000 < currentDate.getTime()) {\r\n        const response = await axios.get(\"http://localhost:5000/token\");\r\n        config.headers.Authorization = `Bearer ${response.data.accessToken}`;\r\n        setToken(response.data.accessToken);\r\n        const decoded = jwt_decode(response.data.accessToken);\r\n        // @ts-ignore\r\n        setName(decoded.name);\r\n        // @ts-ignore\r\n        setExpire(decoded.exp);\r\n      }\r\n      return config;\r\n    },\r\n    (error) => {\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  const getUsers = async () => {\r\n    const response = await axiosJWT.get(\"http://localhost:5000/users\", {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    setUsers(response.data);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-6\">\r\n      <div className=\"columns is-vcentered\">\r\n        <div className=\"column is-8\">\r\n          <h1>Welcome Back: {name}</h1>\r\n        </div>\r\n        <div className=\"column is-right\">\r\n          <button\r\n            className=\"button is-primary is-pulled-right new-board-btn\"\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              if (props.isActive) props.setActive(!props.isActive);\r\n            }}\r\n          >\r\n            New Board\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* <button onClick={getUsers} classNameName=\"button is-info\">Get Users</button>\r\n            <table classNameName=\"table is-striped is-fullwidth\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>No</th>\r\n                        <th>Name</th>\r\n                        <th>Email</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {users.map((user, index) => (\r\n                        <tr key={user.id}>\r\n                            <td>{index + 1}</td>\r\n                            <td>{user.name}</td>\r\n                            <td>{user.email}</td>\r\n                        </tr>\r\n                    ))}\r\n\r\n                </tbody>\r\n            </table> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\David\\Dropbox\\Dev\\RegisterandLogin\\reactClient\\src\\components\\Login.js",[],"C:\\Users\\David\\Dropbox\\Dev\\RegisterandLogin\\reactClient\\src\\components\\Register.js",[],"C:\\Users\\David\\Dropbox\\Dev\\RegisterandLogin\\reactClient\\src\\components\\Post.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":14,"column":9,"nodeType":"48","messageId":"49","endLine":14,"endColumn":16},{"ruleId":"46","severity":1,"message":"50","line":29,"column":10,"nodeType":"48","messageId":"49","endLine":29,"endColumn":16},{"ruleId":"46","severity":1,"message":"51","line":92,"column":9,"nodeType":"48","messageId":"49","endLine":92,"endColumn":19},{"ruleId":"46","severity":1,"message":"52","line":176,"column":9,"nodeType":"48","messageId":"49","endLine":176,"endColumn":20},{"ruleId":"53","severity":1,"message":"54","line":308,"column":35,"nodeType":"55","endLine":311,"endColumn":36},{"ruleId":"53","severity":1,"message":"54","line":316,"column":35,"nodeType":"55","endLine":319,"endColumn":36},{"ruleId":"46","severity":1,"message":"56","line":11,"column":10,"nodeType":"48","messageId":"49","endLine":11,"endColumn":15},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'history' is assigned a value but never used.","Identifier","unusedVar","'sorted' is assigned a value but never used.","'toggleSort' is assigned a value but never used.","'deleteBoard' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'users' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]